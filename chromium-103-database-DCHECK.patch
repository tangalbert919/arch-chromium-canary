--- content/browser/first_party_sets/database/first_party_sets_database.cc.orig	2022-04-17 16:24:21.675579400 -0500
+++ content/browser/first_party_sets/database/first_party_sets_database.cc	2022-04-17 16:10:38.459053000 -0500
@@ -173,7 +173,7 @@
   if (db_status_ != InitStatus::kUnattempted)
     return db_status_ == InitStatus::kSuccess;
 
-  DCHECK_EQ(db_, nullptr);
+  //DCHECK_EQ(db_, nullptr);
   db_ = std::make_unique<sql::Database>(sql::DatabaseOptions{
       .exclusive_locking = true, .page_size = 4096, .cache_size = 32});
   db_->set_histogram_tag("FirstPartySets");
@@ -196,7 +196,7 @@
 }
 
 bool FirstPartySetsDatabase::OpenDatabase() {
-  DCHECK_NE(db_, nullptr);
+  //DCHECK_NE(db_, nullptr);
   if (db_->is_open() || db_->Open(db_path_)) {
     db_->Preload();
     return true;
@@ -206,7 +206,7 @@
 
 void FirstPartySetsDatabase::DatabaseErrorCallback(int extended_error,
                                                    sql::Statement* stmt) {
-  DCHECK_NE(db_, nullptr);
+  //DCHECK_NE(db_, nullptr);
   // Attempt to recover a corrupt database.
   if (sql::Recovery::ShouldRecover(extended_error)) {
     // Prevent reentrant calls.
